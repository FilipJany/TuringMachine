package org.turing.support.platform;

import java.io.File;
import java.io.IOException;

/**
 * Abstract class to express all OS-dependent data like directory of user
 * documents, path to application data, etc.
 * <p>
 *
 * @author Patryk Stopyra at Wroclaw University of Technology
 */
public abstract class OS {

    //ENUMS
    public static enum PlatformFamily {

        MAC, LINUX, WINDOWS
    }

    //FIELDS
    protected PlatformFamily family;
    protected String name;

    //CONSTRUCTOR
    protected OS(PlatformFamily family, String name) {
        this.name = name;
    }

    //STATIC METHODS
    public static final OS getPlatformInstance(PlatformFamily family) throws IOException {
        switch (family) {
            case MAC:
                return OSMac.getInstance();
            case LINUX:
                return OSLinux.getInstance();
            case WINDOWS:
                return OSWindows.getInstance();
            default:
                throw new IOException("Try of instantiation the platform manager for unsupported Operating System.");
        }
    }

    //METHODS

    /**
     * Method to provide path indicating user's application support data
     * directory. Support data is all files generated by app, to provide
     * user-specyfic profiling like personal settings, and so on.
     * <p>
     * This information is strongly platform-dependent, i.e. on Mac such data
     * should be kept in <code>Library/Application Support</code>, on Windows in
     * <code>Program Files</code>
     * directory in subdirectory of application and go on...
     * <p>
     *
     * @return Path to directory of application data.
     */
    public abstract File getSupportDataDirectory();

    /**
     * Method to provide all application support data subdirectories setup.
     * <p>
     *
     * @param subdirectories Array of subdirectories paths.
     * @return True if all directories already exists or were successfully
     * created. False otherwise.
     */
    public boolean setupSupportDataDirectory(String[] subdirectories) {
        File appSuportDirectory = getSupportDataDirectory();
        if (!appSuportDirectory.isDirectory())
            if (!appSuportDirectory.mkdirs())
                return false;

        String appSuportDirectoryPath = appSuportDirectory.getAbsolutePath();
        for (String directoryPath : subdirectories) {
            File directory = new File(appSuportDirectoryPath + directoryPath);

            if (!directory.isDirectory())
                if (!directory.mkdirs())
                    return false;
        }

        return true;
    }
}
